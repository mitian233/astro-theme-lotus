---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "../styles/tailwind.css";
import "../styles/contents_rayout.css";
import "katex/dist/katex.min.css";

import { SITE_TITLE } from "../consts";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const { title, description, image } = Astro.props;

const resolvedImage = image ? new URL(image, Astro.site).toString() : undefined;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="sitemap" href="/sitemap-index.xml" />
<link
  rel="alternate"
  type="application/rss+xml"
  title={SITE_TITLE}
  href={new URL("rss.xml", Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<!-- Low Priority Global Metadata -->
<!--<link rel="icon" type="image/svg+xml" href="/favicon.svg" /> -->
<link rel="sitemap" href="/sitemap-index.xml" />
<link rel="alternate" type="application/rss+xml" href="/rss.xml" title="RSS" />

<!-- QQ/WeChat Share Metadata -->
<meta itemprop="name" content={title} />
<meta itemprop="description" content={description} />
{resolvedImage && <meta itemprop="image" content={resolvedImage} />}

<!-- Font preloads -->
<link
  rel="preload"
  href="/fonts/atkinson-regular.woff"
  as="font"
  type="font/woff"
  crossorigin
/>
<link
  rel="preload"
  href="/fonts/atkinson-bold.woff"
  as="font"
  type="font/woff"
  crossorigin
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}{Astro.url.pathname !== "/" && ` | ${SITE_TITLE}`}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
{resolvedImage && <meta property="og:image" content={resolvedImage} />}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
{resolvedImage && <meta property="twitter:image" content={resolvedImage} />}

<!-- Google Fonts -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100..900&family=Noto+Sans+SC:wght@100..900&family=Noto+Serif+SC:wght@200..900&family=Oranienbaum&family=Zen+Kaku+Gothic+Antique&family=Zen+Kaku+Gothic+New&family=Zen+Old+Mincho&display=swap"
  rel="stylesheet"
/>

<script>
  import gsap from "gsap";

  document.addEventListener("DOMContentLoaded", fadeInPage);
  window.addEventListener("pageshow", (event) => {
    // Check if page is loaded from cache (back/forward navigation)
    if (event.persisted) {
      fadeInPage();
    }
  });

  function fadeInPage() {
    gsap.fromTo(
      document.body,
      { opacity: 0 },
      {
        opacity: 1,
        duration: 0.4,
        ease: "power1.inOut",
        clearProps: "opacity",
      }
    );
  }

  document.addEventListener("click", (event) => {
    const link = (event.target as HTMLElement)?.closest("a");
    if (!link) return;
    const href = link.getAttribute("href");

    if (
      !href ||
      href.startsWith("#") ||
      href.startsWith("mailto:") ||
      href.startsWith("tel:") ||
      link.getAttribute("data-fancybox") ||
      link.getAttribute("target") === "_blank" ||
      link.classList.contains("no-intercept")
    ) {
      return;
    }

    const main = document.querySelector("body");
    const playPageTransition = () =>
      gsap.to(main, {
        opacity: 0,
        duration: 0.3,
        onComplete: () => {
          window.location.href = href;
        },
      });

    const isInternalLink =
      link.classList.contains("insite") ||
      (href.startsWith("/") && !href.startsWith("//"));

    if (isInternalLink) {
      event.preventDefault();
      playPageTransition();
    }
  });
</script>
